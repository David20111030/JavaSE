package gz.itcast.b_04线程安全问题_锁_同步代码块;

import org.junit.Test;

public class SellTicketDemo {
	/**
	 * 如何解决线程安全问题呢？
	 * 	要想解决问题，就要知道那些原因会导致出问题:(而且这些原因也是我们以后判断一个程序是否会有线程安全问题的标准)
	 * 		A：是否是多线程环境
	 * 		B：是否有共享数据
	 * 		C：是否有多条语句操作共享数据
	 * 
	 * 我们来回想一下我们的程序有没有上面的问题呢？
	 * 	A:是否是多线程环境   是
	 *  B：是否有共享数据   有
	 *  C：是否有多条语句操作共享数据  是
	 *  
	 *  由此可见，我们的程序出现问题是正常的，因为他满足出现问题的条件。
	 *  
	 *  ##接下来才是我们要想想如何解决问题呢？
	 *  	A和B的问题我们改变不了，我们只能想办法去把C改变一下。
	 *  思想：
	 *  	把多条语句操作共享数据的代码给报称一个整体，让某个线程在执行的时候，别人不能来执行。
	 *  	问题是我们不知道怎么包啊？但是Java给我们提供了:同步机制。
	 *  
	 *  同步代码块：
	 *  	synchronized(对象){
	 *  		需要同步的代码;
	 *  	}
	 * 		1:括号中的对象是什么呢？
	 * 			我们可以随便创建一个对象试试。同步可以解决安全问题的根本原因就在那个对象上。该对象如同锁的功能。多个线程必须是同一把锁。
	 * 		2:需要同步的代码是哪些呢？
	 * 			把多条语句操作的 共享数据的代码部分 给包起来
	 * 		注意：同步可以解决安全问题的根本原因就在那个对象上。该对象如同锁的功能。多个线程必须是同一把锁。
	 * 
	 * 
	 */
	/**
	 * 同步的特点：	
	 * 		前提：
	 * 			多个线程
	 * 		用同步解决问题的时候要注意：
	 * 			多个线程使用的是同一个锁对象。
	 * 		同步的好处：
	 * 			同步的出现解决了多线程的安全问题。		
	 * 		同步的弊端：		
	 * 			当线程相当多时，因为每个线程都会去判断同步上的锁，这是很耗费资源的，无形中会降低程序的运行效率。
	 * @param args
	 */
	public static void main(String[] args) {
		//创建自定义线程对象  也叫资源对象
		MyRunnable my = new MyRunnable();
		
		//创建Thread线程对象，并将自定义线程对象作为构造参数传递
		Thread t1 = new Thread(my,"窗口1");
		Thread t2 = new Thread(my,"窗口2");
		Thread t3 = new Thread(my,"窗口3");
		
		t3.setPriority(10);//设置线程优先级   只是能抢到CPU时间片的几率会大一点
		//启动线程
		t1.start();
		t2.start();
		t3.start();
	}
}
